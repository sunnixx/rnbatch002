{"dependencies":[{"name":"react","isAsync":false},{"name":"./../../../../react-transform-hmr/lib/index.js","isAsync":false},{"name":"clamp","isAsync":false},{"name":"react-native","isAsync":false},{"name":"./StackViewCard","isAsync":false},{"name":"../Header/Header","isAsync":false},{"name":"../../NavigationActions","isAsync":false},{"name":"../../routers/StackActions","isAsync":false},{"name":"../SceneView","isAsync":false},{"name":"../withOrientation","isAsync":false},{"name":"../NavigationContext","isAsync":false},{"name":"./StackViewTransitionConfigs","isAsync":false},{"name":"../../utils/ReactNativeFeatures","isAsync":false}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n\n  var _react = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[0], \"react\"));\n\n  var _index = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1], \"./../../../../react-transform-hmr/lib/index.js\"));\n\n  var _clamp = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2], \"clamp\"));\n\n  var _reactNative = _$$_REQUIRE(_dependencyMap[3], \"react-native\");\n\n  var _StackViewCard = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4], \"./StackViewCard\"));\n\n  var _Header = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5], \"../Header/Header\"));\n\n  var _NavigationActions = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6], \"../../NavigationActions\"));\n\n  var _StackActions = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7], \"../../routers/StackActions\"));\n\n  var _SceneView = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[8], \"../SceneView\"));\n\n  var _withOrientation = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[9], \"../withOrientation\"));\n\n  var _NavigationContext = _$$_REQUIRE(_dependencyMap[10], \"../NavigationContext\");\n\n  var _StackViewTransitionConfigs = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[11], \"./StackViewTransitionConfigs\"));\n\n  var _ReactNativeFeatures = _$$_REQUIRE(_dependencyMap[12], \"../../utils/ReactNativeFeatures\");\n\n  var _jsxFileName = \"/home/sumair/Desktop/My Stuff/RN Batch 02/dbconnapp/node_modules/react-navigation/src/views/StackView/StackViewLayout.js\";\n\n  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n  function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\n  function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\n  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\n  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n  function _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } _setPrototypeOf(subClass.prototype, superClass && superClass.prototype); if (superClass) _setPrototypeOf(subClass, superClass); }\n\n  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\n  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\n  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n  function _possibleConstructorReturn(self, call) { if (call && (typeof call === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\n  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\n  function _getPrototypeOf(o) { _getPrototypeOf = Object.getPrototypeOf || function _getPrototypeOf(o) { return o.__proto__; }; return _getPrototypeOf(o); }\n\n  var _components = {\n    StackViewLayout: {\n      displayName: \"StackViewLayout\"\n    }\n  };\n\n  var _reactTransformHmrLibIndexJs2 = (0, _index.default)({\n    filename: \"/home/sumair/Desktop/My Stuff/RN Batch 02/dbconnapp/node_modules/react-navigation/src/views/StackView/StackViewLayout.js\",\n    components: _components,\n    locals: [module],\n    imports: [_react.default]\n  });\n\n  function _wrapComponent(id) {\n    return function (Component) {\n      return _reactTransformHmrLibIndexJs2(Component, id);\n    };\n  }\n\n  var emptyFunction = function emptyFunction() {};\n\n  var _Dimensions$get = _reactNative.Dimensions.get('window'),\n      WINDOW_WIDTH = _Dimensions$get.width,\n      WINDOW_HEIGHT = _Dimensions$get.height;\n\n  var IS_IPHONE_X = _reactNative.Platform.OS === 'ios' && !_reactNative.Platform.isPad && !_reactNative.Platform.isTVOS && (WINDOW_HEIGHT === 812 || WINDOW_WIDTH === 812);\n\n  var EaseInOut = _reactNative.Easing.inOut(_reactNative.Easing.ease);\n\n  var HEADER_LAYOUT_PRESET_VALUES = ['center', 'left'];\n  var HEADER_TRANSITION_PRESET_VALUES = ['uikit', 'fade-in-place'];\n  var ANIMATION_DURATION = 500;\n  var POSITION_THRESHOLD = 1 / 2;\n  var RESPOND_THRESHOLD = 20;\n  var GESTURE_RESPONSE_DISTANCE_HORIZONTAL = 25;\n  var GESTURE_RESPONSE_DISTANCE_VERTICAL = 135;\n\n  var animatedSubscribeValue = function animatedSubscribeValue(animatedValue) {\n    if (!animatedValue.__isNative) {\n      return;\n    }\n\n    if (Object.keys(animatedValue._listeners).length === 0) {\n      animatedValue.addListener(emptyFunction);\n    }\n  };\n\n  var getDefaultHeaderHeight = function getDefaultHeaderHeight(isLandscape) {\n    if (_reactNative.Platform.OS === 'ios') {\n      if (isLandscape && !_reactNative.Platform.isPad) {\n        return 32;\n      } else if (IS_IPHONE_X) {\n        return 88;\n      } else {\n        return 64;\n      }\n    } else {\n      return 56;\n    }\n  };\n\n  var StackViewLayout = function (_React$Component) {\n    function StackViewLayout(props) {\n      var _this;\n\n      _classCallCheck(this, StackViewLayout);\n\n      _this = _possibleConstructorReturn(this, _getPrototypeOf(StackViewLayout).call(this, props));\n      _this._gestureStartValue = 0;\n      _this._isResponding = false;\n      _this._immediateIndex = null;\n      _this._panResponder = _reactNative.PanResponder.create({\n        onPanResponderTerminate: function onPanResponderTerminate() {\n          var navigation = _this.props.transitionProps.navigation;\n          var index = navigation.state.index;\n          _this._isResponding = false;\n\n          _this._reset(index, 0);\n\n          _this.props.onGestureCanceled && _this.props.onGestureCanceled();\n        },\n        onPanResponderGrant: function onPanResponderGrant() {\n          var _this$props$transitio = _this.props.transitionProps,\n              navigation = _this$props$transitio.navigation,\n              position = _this$props$transitio.position,\n              scene = _this$props$transitio.scene;\n          var index = navigation.state.index;\n\n          if (index !== scene.index) {\n            return false;\n          }\n\n          position.stopAnimation(function (value) {\n            _this._isResponding = true;\n            _this._gestureStartValue = value;\n          });\n          _this.props.onGestureBegin && _this.props.onGestureBegin();\n        },\n        onMoveShouldSetPanResponder: function onMoveShouldSetPanResponder(event, gesture) {\n          var _this$props = _this.props,\n              _this$props$transitio2 = _this$props.transitionProps,\n              navigation = _this$props$transitio2.navigation,\n              layout = _this$props$transitio2.layout,\n              scene = _this$props$transitio2.scene,\n              mode = _this$props.mode;\n          var index = navigation.state.index;\n          var isVertical = mode === 'modal';\n          var options = scene.descriptor.options;\n          var gestureDirection = options.gestureDirection;\n          var gestureDirectionInverted = typeof gestureDirection === 'string' ? gestureDirection === 'inverted' : _reactNative.I18nManager.isRTL;\n\n          if (index !== scene.index) {\n            return false;\n          }\n\n          var immediateIndex = _this._immediateIndex == null ? index : _this._immediateIndex;\n          var currentDragDistance = gesture[isVertical ? 'dy' : 'dx'];\n          var currentDragPosition = event.nativeEvent[isVertical ? 'pageY' : 'pageX'];\n          var axisLength = isVertical ? layout.height.__getValue() : layout.width.__getValue();\n          var axisHasBeenMeasured = !!axisLength;\n          var screenEdgeDistance = gestureDirectionInverted ? axisLength - (currentDragPosition - currentDragDistance) : currentDragPosition - currentDragDistance;\n          var _options$gestureRespo = options.gestureResponseDistance,\n              userGestureResponseDistance = _options$gestureRespo === void 0 ? {} : _options$gestureRespo;\n          var gestureResponseDistance = isVertical ? userGestureResponseDistance.vertical || GESTURE_RESPONSE_DISTANCE_VERTICAL : userGestureResponseDistance.horizontal || GESTURE_RESPONSE_DISTANCE_HORIZONTAL;\n\n          if (screenEdgeDistance > gestureResponseDistance) {\n            return false;\n          }\n\n          var hasDraggedEnough = Math.abs(currentDragDistance) > RESPOND_THRESHOLD;\n          var isOnFirstCard = immediateIndex === 0;\n          var shouldSetResponder = hasDraggedEnough && axisHasBeenMeasured && !isOnFirstCard;\n          return shouldSetResponder;\n        },\n        onPanResponderMove: function onPanResponderMove(event, gesture) {\n          var _this$props2 = _this.props,\n              _this$props2$transiti = _this$props2.transitionProps,\n              navigation = _this$props2$transiti.navigation,\n              position = _this$props2$transiti.position,\n              layout = _this$props2$transiti.layout,\n              scene = _this$props2$transiti.scene,\n              mode = _this$props2.mode;\n          var index = navigation.state.index;\n          var isVertical = mode === 'modal';\n          var options = scene.descriptor.options;\n          var gestureDirection = options.gestureDirection;\n          var gestureDirectionInverted = typeof gestureDirection === 'string' ? gestureDirection === 'inverted' : _reactNative.I18nManager.isRTL;\n          var startValue = _this._gestureStartValue;\n          var axis = isVertical ? 'dy' : 'dx';\n          var axisDistance = isVertical ? layout.height.__getValue() : layout.width.__getValue();\n          var currentValue = axis === 'dx' && gestureDirectionInverted ? startValue + gesture[axis] / axisDistance : startValue - gesture[axis] / axisDistance;\n          var value = (0, _clamp.default)(index - 1, currentValue, index);\n          position.setValue(value);\n        },\n        onPanResponderTerminationRequest: function onPanResponderTerminationRequest() {\n          return false;\n        },\n        onPanResponderRelease: function onPanResponderRelease(event, gesture) {\n          var _this$props3 = _this.props,\n              _this$props3$transiti = _this$props3.transitionProps,\n              navigation = _this$props3$transiti.navigation,\n              position = _this$props3$transiti.position,\n              layout = _this$props3$transiti.layout,\n              scene = _this$props3$transiti.scene,\n              mode = _this$props3.mode;\n          var index = navigation.state.index;\n          var isVertical = mode === 'modal';\n          var options = scene.descriptor.options;\n          var gestureDirection = options.gestureDirection;\n          var gestureDirectionInverted = typeof gestureDirection === 'string' ? gestureDirection === 'inverted' : _reactNative.I18nManager.isRTL;\n\n          if (!_this._isResponding) {\n            return;\n          }\n\n          _this._isResponding = false;\n          var immediateIndex = _this._immediateIndex == null ? index : _this._immediateIndex;\n          var axisDistance = isVertical ? layout.height.__getValue() : layout.width.__getValue();\n          var movementDirection = gestureDirectionInverted ? -1 : 1;\n          var movedDistance = movementDirection * gesture[isVertical ? 'dy' : 'dx'];\n          var gestureVelocity = movementDirection * gesture[isVertical ? 'vy' : 'vx'];\n          var defaultVelocity = axisDistance / ANIMATION_DURATION;\n          var velocity = Math.max(Math.abs(gestureVelocity), defaultVelocity);\n          var resetDuration = gestureDirectionInverted ? (axisDistance - movedDistance) / velocity : movedDistance / velocity;\n          var goBackDuration = gestureDirectionInverted ? movedDistance / velocity : (axisDistance - movedDistance) / velocity;\n          position.stopAnimation(function (value) {\n            if (gestureVelocity < -0.5) {\n              _this.props.onGestureCanceled && _this.props.onGestureCanceled();\n\n              _this._reset(immediateIndex, resetDuration);\n\n              return;\n            }\n\n            if (gestureVelocity > 0.5) {\n              _this.props.onGestureFinish && _this.props.onGestureFinish();\n\n              _this._goBack(immediateIndex, goBackDuration);\n\n              return;\n            }\n\n            if (value <= index - POSITION_THRESHOLD) {\n              _this.props.onGestureFinish && _this.props.onGestureFinish();\n\n              _this._goBack(immediateIndex, goBackDuration);\n            } else {\n              _this.props.onGestureCanceled && _this.props.onGestureCanceled();\n\n              _this._reset(immediateIndex, resetDuration);\n            }\n          });\n        }\n      });\n\n      _this._onFloatingHeaderLayout = function (e) {\n        _this.setState({\n          floatingHeaderHeight: e.nativeEvent.layout.height\n        });\n      };\n\n      _this._getTransitionConfig = function () {\n        var isModal = _this.props.mode === 'modal';\n        return _StackViewTransitionConfigs.default.getTransitionConfig(_this.props.transitionConfig, _this.props.transitionProps, _this.props.lastTransitionProps, isModal);\n      };\n\n      _this._renderCard = function (scene) {\n        var _this$_getTransitionC = _this._getTransitionConfig(),\n            screenInterpolator = _this$_getTransitionC.screenInterpolator;\n\n        var style = screenInterpolator && screenInterpolator(_objectSpread({}, _this.props.transitionProps, {\n          scene: scene\n        }));\n        var options = scene.descriptor.options;\n        var hasHeader = options.header !== null;\n\n        var headerMode = _this._getHeaderMode();\n\n        var marginTop = 0;\n\n        if (!hasHeader && headerMode === 'float') {\n          marginTop = -_this.state.floatingHeaderHeight;\n        }\n\n        return _react.default.createElement(_StackViewCard.default, _extends({}, _this.props.transitionProps, {\n          key: \"card_\" + scene.key,\n          style: [style, {\n            marginTop: marginTop\n          }, _this.props.cardStyle],\n          scene: scene,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 612\n          }\n        }), _this._renderInnerScene(scene));\n      };\n\n      _this.state = {\n        floatingHeaderHeight: getDefaultHeaderHeight(props.isLandscape)\n      };\n      return _this;\n    }\n\n    _createClass(StackViewLayout, [{\n      key: \"_renderHeader\",\n      value: function _renderHeader(scene, headerMode) {\n        var options = scene.descriptor.options;\n        var header = options.header;\n\n        if (__DEV__ && typeof header === 'string') {\n          throw new Error(\"Invalid header value: \\\"\" + header + \"\\\". The header option must be a valid React component or null, not a string.\");\n        }\n\n        if (header === null && headerMode === 'screen') {\n          return null;\n        }\n\n        if (_react.default.isValidElement(header)) {\n          return header;\n        }\n\n        var renderHeader = header || function (props) {\n          return _react.default.createElement(_Header.default, _extends({}, props, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 145\n            }\n          }));\n        };\n\n        var _this$_getTransitionC2 = this._getTransitionConfig(),\n            headerLeftInterpolator = _this$_getTransitionC2.headerLeftInterpolator,\n            headerTitleInterpolator = _this$_getTransitionC2.headerTitleInterpolator,\n            headerRightInterpolator = _this$_getTransitionC2.headerRightInterpolator;\n\n        var _this$props4 = this.props,\n            mode = _this$props4.mode,\n            transitionProps = _this$props4.transitionProps,\n            lastTransitionProps = _this$props4.lastTransitionProps,\n            passProps = _objectWithoutProperties(_this$props4, [\"mode\", \"transitionProps\", \"lastTransitionProps\"]);\n\n        return _react.default.createElement(_NavigationContext.NavigationProvider, {\n          value: scene.descriptor.navigation,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 161\n          }\n        }, renderHeader(_objectSpread({}, passProps, transitionProps, {\n          scene: scene,\n          mode: headerMode,\n          transitionPreset: this._getHeaderTransitionPreset(),\n          layoutPreset: this._getHeaderLayoutPreset(),\n          backTitleVisible: this._getheaderBackTitleVisible(),\n          leftInterpolator: headerLeftInterpolator,\n          titleInterpolator: headerTitleInterpolator,\n          rightInterpolator: headerRightInterpolator\n        })));\n      }\n    }, {\n      key: \"_animatedSubscribe\",\n      value: function _animatedSubscribe(props) {\n        animatedSubscribeValue(props.transitionProps.layout.width);\n        animatedSubscribeValue(props.transitionProps.layout.height);\n        animatedSubscribeValue(props.transitionProps.position);\n      }\n    }, {\n      key: \"_reset\",\n      value: function _reset(resetToIndex, duration) {\n        if (_reactNative.Platform.OS === 'ios' && (0, _ReactNativeFeatures.supportsImprovedSpringAnimation)()) {\n          _reactNative.Animated.spring(this.props.transitionProps.position, {\n            toValue: resetToIndex,\n            stiffness: 5000,\n            damping: 600,\n            mass: 3,\n            useNativeDriver: this.props.transitionProps.position.__isNative\n          }).start();\n        } else {\n          _reactNative.Animated.timing(this.props.transitionProps.position, {\n            toValue: resetToIndex,\n            duration: duration,\n            easing: EaseInOut,\n            useNativeDriver: this.props.transitionProps.position.__isNative\n          }).start();\n        }\n      }\n    }, {\n      key: \"_goBack\",\n      value: function _goBack(backFromIndex, duration) {\n        var _this2 = this;\n\n        var _this$props$transitio3 = this.props.transitionProps,\n            navigation = _this$props$transitio3.navigation,\n            position = _this$props$transitio3.position,\n            scenes = _this$props$transitio3.scenes;\n        var toValue = Math.max(backFromIndex - 1, 0);\n        this._immediateIndex = toValue;\n\n        var onCompleteAnimation = function onCompleteAnimation() {\n          _this2._immediateIndex = null;\n          var backFromScene = scenes.find(function (s) {\n            return s.index === toValue + 1;\n          });\n\n          if (!_this2._isResponding && backFromScene) {\n            navigation.dispatch(_NavigationActions.default.back({\n              key: backFromScene.route.key,\n              immediate: true\n            }));\n            navigation.dispatch(_StackActions.default.completeTransition());\n          }\n        };\n\n        if (_reactNative.Platform.OS === 'ios' && (0, _ReactNativeFeatures.supportsImprovedSpringAnimation)()) {\n          _reactNative.Animated.spring(position, {\n            toValue: toValue,\n            stiffness: 5000,\n            damping: 600,\n            mass: 3,\n            useNativeDriver: position.__isNative\n          }).start(onCompleteAnimation);\n        } else {\n          _reactNative.Animated.timing(position, {\n            toValue: toValue,\n            duration: duration,\n            easing: EaseInOut,\n            useNativeDriver: position.__isNative\n          }).start(onCompleteAnimation);\n        }\n      }\n    }, {\n      key: \"render\",\n      value: function render() {\n        var _this3 = this;\n\n        var floatingHeader = null;\n\n        var headerMode = this._getHeaderMode();\n\n        if (headerMode === 'float') {\n          var _scene = this.props.transitionProps.scene;\n          floatingHeader = _react.default.createElement(_reactNative.View, {\n            pointerEvents: \"box-none\",\n            onLayout: this._onFloatingHeaderLayout,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 444\n            }\n          }, this._renderHeader(_scene, headerMode));\n        }\n\n        var _this$props5 = this.props,\n            _this$props5$transiti = _this$props5.transitionProps,\n            scene = _this$props5$transiti.scene,\n            scenes = _this$props5$transiti.scenes,\n            mode = _this$props5.mode;\n        var options = scene.descriptor.options;\n        var gesturesEnabled = typeof options.gesturesEnabled === 'boolean' ? options.gesturesEnabled : _reactNative.Platform.OS === 'ios';\n        var responder = !gesturesEnabled ? null : this._panResponder;\n        var handlers = gesturesEnabled ? responder.panHandlers : {};\n        var containerStyle = [styles.container, this._getTransitionConfig().containerStyle];\n        return _react.default.createElement(_reactNative.View, _extends({}, handlers, {\n          style: containerStyle,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 469\n          }\n        }), _react.default.createElement(_reactNative.View, {\n          style: styles.scenes,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 470\n          }\n        }, scenes.map(function (s) {\n          return _this3._renderCard(s);\n        })), floatingHeader);\n      }\n    }, {\n      key: \"_getHeaderMode\",\n      value: function _getHeaderMode() {\n        if (this.props.headerMode) {\n          return this.props.headerMode;\n        }\n\n        if (_reactNative.Platform.OS === 'android' || this.props.mode === 'modal') {\n          return 'screen';\n        }\n\n        return 'float';\n      }\n    }, {\n      key: \"_getHeaderLayoutPreset\",\n      value: function _getHeaderLayoutPreset() {\n        var headerLayoutPreset = this.props.headerLayoutPreset;\n\n        if (headerLayoutPreset) {\n          if (__DEV__) {\n            if (this._getHeaderTransitionPreset() === 'uikit' && headerLayoutPreset === 'left' && _reactNative.Platform.OS === 'ios') {\n              console.warn(\"headerTransitionPreset with the value 'ui-kit' is incompatible with headerLayoutPreset 'left'\");\n            }\n          }\n\n          if (HEADER_LAYOUT_PRESET_VALUES.includes(headerLayoutPreset)) {\n            return headerLayoutPreset;\n          }\n\n          if (__DEV__) {\n            console.error(\"Invalid configuration applied for headerLayoutPreset - expected one of \" + HEADER_LAYOUT_PRESET_VALUES.join(', ') + \" but received \" + JSON.stringify(headerLayoutPreset));\n          }\n        }\n\n        if (_reactNative.Platform.OS === 'android') {\n          return 'left';\n        } else {\n          return 'center';\n        }\n      }\n    }, {\n      key: \"_getHeaderTransitionPreset\",\n      value: function _getHeaderTransitionPreset() {\n        if (_reactNative.Platform.OS === 'android' || this._getHeaderMode() === 'screen') {\n          return 'fade-in-place';\n        }\n\n        var headerTransitionPreset = this.props.headerTransitionPreset;\n\n        if (headerTransitionPreset) {\n          if (HEADER_TRANSITION_PRESET_VALUES.includes(headerTransitionPreset)) {\n            return headerTransitionPreset;\n          }\n\n          if (__DEV__) {\n            console.error(\"Invalid configuration applied for headerTransitionPreset - expected one of \" + HEADER_TRANSITION_PRESET_VALUES.join(', ') + \" but received \" + JSON.stringify(headerTransitionPreset));\n          }\n        }\n\n        return 'fade-in-place';\n      }\n    }, {\n      key: \"_getheaderBackTitleVisible\",\n      value: function _getheaderBackTitleVisible() {\n        var headerBackTitleVisible = this.props.headerBackTitleVisible;\n        return headerBackTitleVisible;\n      }\n    }, {\n      key: \"_renderInnerScene\",\n      value: function _renderInnerScene(scene) {\n        var _scene$descriptor = scene.descriptor,\n            options = _scene$descriptor.options,\n            navigation = _scene$descriptor.navigation,\n            getComponent = _scene$descriptor.getComponent;\n        var SceneComponent = getComponent();\n        var screenProps = this.props.screenProps;\n\n        var headerMode = this._getHeaderMode();\n\n        if (headerMode === 'screen') {\n          return _react.default.createElement(_reactNative.View, {\n            style: styles.container,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 561\n            }\n          }, _react.default.createElement(_reactNative.View, {\n            style: styles.scenes,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 562\n            }\n          }, _react.default.createElement(_SceneView.default, {\n            screenProps: screenProps,\n            navigation: navigation,\n            component: SceneComponent,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 563\n            }\n          })), this._renderHeader(scene, headerMode));\n        }\n\n        return _react.default.createElement(_SceneView.default, {\n          screenProps: screenProps,\n          navigation: navigation,\n          component: SceneComponent,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 574\n          }\n        });\n      }\n    }]);\n\n    _inherits(StackViewLayout, _React$Component);\n\n    return StackViewLayout;\n  }(_react.default.Component);\n\n  StackViewLayout = _wrapComponent(\"StackViewLayout\")(StackViewLayout);\n\n  var styles = _reactNative.StyleSheet.create({\n    container: {\n      flex: 1,\n      flexDirection: 'column-reverse'\n    },\n    scenes: {\n      flex: 1\n    }\n  });\n\n  var _default2 = (0, _withOrientation.default)(StackViewLayout);\n\n  exports.default = _default2;\n});","map":[[7,0,1,0],[11,0,3,0],[13,0,4,0],[15,0,15,0],[17,0,16,0],[19,0,17,0],[21,0,18,0],[23,0,19,0],[25,0,20,0],[27,0,21,0],[29,0,23,0],[31,0,24,0],[80,0,26,0],[80,6,26,6,"emptyFunction"],[80,22,26,22],[80,31,26,6,"emptyFunction"],[80,44,26,22],[80,47,26,28],[80,48,26,30],[80,49,26,0],[82,24,28,55,"Dimensions"],[82,48,28,66,"get"],[82,51,28,55],[82,52,28,70],[82,60,28,55],[82,61],[83,6,28,15,"WINDOW_WIDTH"],[83,18],[83,37,28,8,"width"],[83,42],[84,6,28,37,"WINDOW_HEIGHT"],[84,19],[84,38,28,29,"height"],[84,44],[86,0,29,0],[86,6,29,6,"IS_IPHONE_X"],[86,20,30,2,"Platform"],[86,42,30,11,"OS"],[86,44,30,2],[86,49,30,18],[86,54,30,2],[86,58,31,2],[86,59,31,3,"Platform"],[86,81,31,12,"isPad"],[86,86,30,2],[86,90,32,2],[86,91,32,3,"Platform"],[86,113,32,12,"isTVOS"],[86,119,30,2],[86,124,33,3,"WINDOW_HEIGHT"],[86,142,33,21],[86,145,33,3],[86,149,33,28,"WINDOW_WIDTH"],[86,166,33,45],[86,169,30,2],[86,170,29,0],[88,0,35,0],[88,6,35,6,"EaseInOut"],[88,18,35,18,"Easing"],[88,38,35,25,"inOut"],[88,43,35,18],[88,44,35,31,"Easing"],[88,64,35,38,"ease"],[88,68,35,18],[88,69,35,0],[90,0,40,0],[90,6,40,6,"HEADER_LAYOUT_PRESET_VALUES"],[90,36,40,36],[90,37,40,37],[90,45,40,36],[90,47,40,47],[90,53,40,36],[90,54,40,0],[91,0,41,0],[91,6,41,6,"HEADER_TRANSITION_PRESET_VALUES"],[91,40,41,40],[91,41,41,41],[91,48,41,40],[91,50,41,50],[91,65,41,40],[91,66,41,0],[92,0,48,0],[92,6,48,6,"ANIMATION_DURATION"],[92,27,48,27],[92,30,48,0],[93,0,55,0],[93,6,55,6,"POSITION_THRESHOLD"],[93,27,55,27],[93,31,55,31],[93,32,55,0],[94,0,60,0],[94,6,60,6,"RESPOND_THRESHOLD"],[94,26,60,26],[94,28,60,0],[95,0,65,0],[95,6,65,6,"GESTURE_RESPONSE_DISTANCE_HORIZONTAL"],[95,45,65,45],[95,47,65,0],[96,0,66,0],[96,6,66,6,"GESTURE_RESPONSE_DISTANCE_VERTICAL"],[96,43,66,43],[96,46,66,0],[98,0,68,0],[98,6,68,6,"animatedSubscribeValue"],[98,31,68,31],[98,40,68,6,"animatedSubscribeValue"],[98,62,68,31],[98,78,68,48],[99,0,69,2],[99,8,69,6],[99,9,69,7,"animatedValue"],[99,23,69,21,"__isNative"],[99,33,69,2],[99,35,69,33],[100,0,70,4],[101,0,71,3],[103,0,72,2],[103,8,72,6,"Object"],[103,15,72,13,"keys"],[103,19,72,6],[103,20,72,18,"animatedValue"],[103,34,72,32,"_listeners"],[103,44,72,6],[103,46,72,44,"length"],[103,52,72,6],[103,57,72,55],[103,58,72,2],[103,60,72,58],[104,0,73,4,"animatedValue"],[104,20,73,18,"addListener"],[104,31,73,4],[104,32,73,30,"emptyFunction"],[104,45,73,4],[105,0,74,3],[106,0,75,1],[106,3,68,0],[108,0,77,0],[108,6,77,6,"getDefaultHeaderHeight"],[108,31,77,31],[108,40,77,6,"getDefaultHeaderHeight"],[108,62,77,31],[108,76,77,46],[109,0,78,2],[109,8,78,6,"Platform"],[109,30,78,15,"OS"],[109,32,78,6],[109,37,78,22],[109,42,78,2],[109,44,78,29],[110,0,79,4],[110,10,79,8,"isLandscape"],[110,25,79,23],[110,26,79,24,"Platform"],[110,48,79,33,"isPad"],[110,53,79,4],[110,55,79,40],[111,0,80,6],[111,15,80,13],[111,17,80,6],[112,0,81,5],[112,7,79,4],[112,13,81,11],[112,17,81,15,"IS_IPHONE_X"],[112,28,81,11],[112,30,81,28],[113,0,82,6],[113,15,82,13],[113,17,82,6],[114,0,83,5],[114,7,81,11],[114,13,83,11],[115,0,84,6],[115,15,84,13],[115,17,84,6],[116,0,85,5],[117,0,86,3],[117,5,78,2],[117,11,86,9],[118,0,87,4],[118,13,87,11],[118,15,87,4],[119,0,88,3],[120,0,89,1],[120,3,77,0],[122,6,91,6,"StackViewLayout"],[122,21],[123,0,112,2],[123,29,112,14,"props"],[123,34,112,2],[123,36,112,21],[124,0,112,21],[126,0,112,21],[128,0,113,4],[128,91,113,10,"props"],[128,96,113,4],[129,0,112,21],[129,12,98,2,"_gestureStartValue"],[129,30,112,21],[129,33,98,23],[129,34,112,21],[130,0,112,21],[130,12,101,2,"_isResponding"],[130,25,112,21],[130,28,101,18],[130,33,112,21],[131,0,112,21],[131,12,110,2,"_immediateIndex"],[131,27,112,21],[131,30,110,20],[131,34,112,21],[132,0,112,21],[132,12,251,2,"_panResponder"],[132,25,112,21],[132,28,251,18,"PanResponder"],[132,54,251,31,"create"],[132,60,251,18],[132,61,251,38],[133,0,252,4,"onPanResponderTerminate"],[133,33,252,29],[133,68,252,35],[134,0,252,35],[134,14,253,14,"navigation"],[134,24,252,35],[134,27,253,29],[134,33,253,34,"props"],[134,38,253,29],[134,39,253,40,"transitionProps"],[134,54,252,35],[134,55,253,14,"navigation"],[134,65,252,35],[135,0,252,35],[135,14,254,14,"index"],[135,19,252,35],[135,22,254,24,"navigation"],[135,33,254,35,"state"],[135,38,252,35],[135,39,254,14,"index"],[135,44,252,35],[136,0,255,6],[136,16,255,11,"_isResponding"],[136,29,255,6],[136,32,255,27],[136,37,255,6],[138,0,256,6],[138,16,256,11,"_reset"],[138,22,256,6],[138,23,256,18,"index"],[138,28,256,6],[138,30,256,25],[138,31,256,6],[140,0,257,6],[140,16,257,11,"props"],[140,21,257,6],[140,22,257,17,"onGestureCanceled"],[140,39,257,6],[140,43,257,38],[140,49,257,43,"props"],[140,54,257,38],[140,55,257,49,"onGestureCanceled"],[140,72,257,38],[140,74,257,6],[141,0,258,5],[141,9,251,38],[142,0,259,4,"onPanResponderGrant"],[142,29,259,25],[142,60,259,31],[143,0,259,31],[143,38,262,10],[143,44,262,15,"props"],[143,49,259,31],[143,50,261,8,"transitionProps"],[143,65,259,31],[144,0,259,31],[144,14,261,27,"navigation"],[144,24,259,31],[144,49,261,27,"navigation"],[144,59,259,31],[145,0,259,31],[145,14,261,39,"position"],[145,22,259,31],[145,47,261,39,"position"],[145,55,259,31],[146,0,259,31],[146,14,261,49,"scene"],[146,19,259,31],[146,44,261,49,"scene"],[146,49,259,31],[147,0,259,31],[147,14,263,14,"index"],[147,19,259,31],[147,22,263,24,"navigation"],[147,33,263,35,"state"],[147,38,259,31],[147,39,263,14,"index"],[147,44,259,31],[149,0,265,6],[149,14,265,10,"index"],[149,24,265,20,"scene"],[149,30,265,26,"index"],[149,35,265,6],[149,37,265,33],[150,0,266,8],[150,19,266,15],[150,24,266,8],[151,0,267,7],[153,0,269,6,"position"],[153,19,269,15,"stopAnimation"],[153,32,269,6],[153,33,269,29],[153,50,269,38],[154,0,270,8],[154,18,270,13,"_isResponding"],[154,31,270,8],[154,34,270,29],[154,38,270,8],[155,0,271,8],[155,18,271,13,"_gestureStartValue"],[155,36,271,8],[155,39,271,34,"value"],[155,44,271,8],[156,0,272,7],[156,11,269,6],[157,0,273,6],[157,16,273,11,"props"],[157,21,273,6],[157,22,273,17,"onGestureBegin"],[157,36,273,6],[157,40,273,35],[157,46,273,40,"props"],[157,51,273,35],[157,52,273,46,"onGestureBegin"],[157,66,273,35],[157,68,273,6],[158,0,274,5],[158,9,251,38],[159,0,275,4,"onMoveShouldSetPanResponder"],[159,37,275,33],[159,74,275,34,"event"],[159,79,275,33],[159,81,275,41,"gesture"],[159,88,275,33],[159,90,275,53],[160,0,275,53],[160,28,279,10],[160,34,279,15,"props"],[160,39,275,53],[161,0,275,53],[161,51,277,8,"transitionProps"],[161,66,275,53],[162,0,275,53],[162,14,277,27,"navigation"],[162,24,275,53],[162,50,277,27,"navigation"],[162,60,275,53],[163,0,275,53],[163,14,277,39,"layout"],[163,20,275,53],[163,46,277,39,"layout"],[163,52,275,53],[164,0,275,53],[164,14,277,47,"scene"],[164,19,275,53],[164,45,277,47,"scene"],[164,50,275,53],[165,0,275,53],[165,14,278,8,"mode"],[165,18,275,53],[165,33,278,8,"mode"],[165,37,275,53],[166,0,275,53],[166,14,280,14,"index"],[166,19,275,53],[166,22,280,24,"navigation"],[166,33,280,35,"state"],[166,38,275,53],[166,39,280,14,"index"],[166,44,275,53],[167,0,281,6],[167,14,281,12,"isVertical"],[167,27,281,25,"mode"],[167,36,281,34],[167,43,281,6],[168,0,275,53],[168,14,282,14,"options"],[168,21,275,53],[168,24,282,26,"scene"],[168,30,282,32,"descriptor"],[168,40,275,53],[168,41,282,14,"options"],[168,48,275,53],[169,0,283,6],[169,14,283,12,"gestureDirection"],[169,33,283,31,"options"],[169,41,283,39,"gestureDirection"],[169,57,283,6],[170,0,285,6],[170,14,285,12,"gestureDirectionInverted"],[170,41,286,8],[170,48,286,15,"gestureDirection"],[170,64,286,8],[170,69,286,36],[170,77,286,8],[170,80,287,12,"gestureDirection"],[170,101,287,33],[170,111,286,8],[170,114,288,12,"I18nManager"],[170,139,288,24,"isRTL"],[170,144,285,6],[172,0,290,6],[172,14,290,10,"index"],[172,24,290,20,"scene"],[172,30,290,26,"index"],[172,35,290,6],[172,37,290,33],[173,0,291,8],[173,19,291,15],[173,24,291,8],[174,0,292,7],[176,0,294,6],[176,14,294,12,"immediateIndex"],[176,31,295,8],[176,37,295,13,"_immediateIndex"],[176,52,295,8],[176,56,295,32],[176,60,295,8],[176,63,295,39,"index"],[176,68,295,8],[176,71,295,47],[176,77,295,52,"_immediateIndex"],[176,92,294,6],[177,0,296,6],[177,14,296,12,"currentDragDistance"],[177,36,296,34,"gesture"],[177,44,296,42,"isVertical"],[177,57,296,55],[177,61,296,42],[177,64,296,62],[177,68,296,34],[177,69,296,6],[178,0,297,6],[178,14,297,12,"currentDragPosition"],[178,36,298,8,"event"],[178,42,298,14,"nativeEvent"],[178,53,298,8],[178,54,298,26,"isVertical"],[178,67,298,39],[178,74,298,26],[178,77,298,49],[178,84,298,8],[178,85,297,6],[179,0,299,6],[179,14,299,12,"axisLength"],[179,27,299,25,"isVertical"],[179,40,300,10,"layout"],[179,47,300,17,"height"],[179,53,300,10],[179,54,300,24,"__getValue"],[179,64,300,10],[179,66,299,25],[179,69,301,10,"layout"],[179,76,301,17,"width"],[179,81,301,10],[179,82,301,23,"__getValue"],[179,92,301,10],[179,94,299,6],[180,0,302,6],[180,14,302,12,"axisHasBeenMeasured"],[180,36,302,34],[180,37,302,35],[180,38,302,36,"axisLength"],[180,48,302,6],[181,0,305,6],[181,14,305,12,"screenEdgeDistance"],[181,35,305,33,"gestureDirectionInverted"],[181,62,306,10,"axisLength"],[181,76,306,24,"currentDragPosition"],[181,98,306,46,"currentDragDistance"],[181,117,306,10],[181,118,305,33],[181,121,307,10,"currentDragPosition"],[181,143,307,32,"currentDragDistance"],[181,162,305,6],[182,0,275,53],[182,38,312,10,"options"],[182,45,275,53],[182,46,311,8,"gestureResponseDistance"],[182,69,275,53],[183,0,275,53],[183,14,311,33,"userGestureResponseDistance"],[183,41,275,53],[183,79,311,63],[183,81,275,53],[184,0,313,6],[184,14,313,12,"gestureResponseDistance"],[184,40,313,38,"isVertical"],[184,53,314,10,"userGestureResponseDistance"],[184,81,314,38,"vertical"],[184,89,314,10],[184,93,315,10,"GESTURE_RESPONSE_DISTANCE_VERTICAL"],[184,127,313,38],[184,130,316,10,"userGestureResponseDistance"],[184,158,316,38,"horizontal"],[184,168,316,10],[184,172,317,10,"GESTURE_RESPONSE_DISTANCE_HORIZONTAL"],[184,208,313,6],[186,0,319,6],[186,14,319,10,"screenEdgeDistance"],[186,35,319,31,"gestureResponseDistance"],[186,58,319,6],[186,60,319,56],[187,0,321,8],[187,19,321,15],[187,24,321,8],[188,0,322,7],[190,0,324,6],[190,14,324,12,"hasDraggedEnough"],[190,33,325,8,"Math"],[190,38,325,13,"abs"],[190,41,325,8],[190,42,325,17,"currentDragDistance"],[190,61,325,8],[190,65,325,40,"RESPOND_THRESHOLD"],[190,82,324,6],[191,0,327,6],[191,14,327,12,"isOnFirstCard"],[191,30,327,28,"immediateIndex"],[191,49,327,47],[191,50,327,6],[192,0,328,6],[192,14,328,12,"shouldSetResponder"],[192,35,329,8,"hasDraggedEnough"],[192,55,329,28,"axisHasBeenMeasured"],[192,74,329,8],[192,78,329,51],[192,79,329,52,"isOnFirstCard"],[192,92,328,6],[193,0,330,6],[193,17,330,13,"shouldSetResponder"],[193,35,330,6],[194,0,331,5],[194,9,251,38],[195,0,332,4,"onPanResponderMove"],[195,28,332,24],[195,56,332,25,"event"],[195,61,332,24],[195,63,332,32,"gesture"],[195,70,332,24],[195,72,332,44],[196,0,332,44],[196,29,336,10],[196,35,336,15,"props"],[196,40,332,44],[197,0,332,44],[197,51,334,8,"transitionProps"],[197,66,332,44],[198,0,332,44],[198,14,334,27,"navigation"],[198,24,332,44],[198,49,334,27,"navigation"],[198,59,332,44],[199,0,332,44],[199,14,334,39,"position"],[199,22,332,44],[199,47,334,39,"position"],[199,55,332,44],[200,0,332,44],[200,14,334,49,"layout"],[200,20,332,44],[200,45,334,49,"layout"],[200,51,332,44],[201,0,332,44],[201,14,334,57,"scene"],[201,19,332,44],[201,44,334,57,"scene"],[201,49,332,44],[202,0,332,44],[202,14,335,8,"mode"],[202,18,332,44],[202,34,335,8,"mode"],[202,38,332,44],[203,0,332,44],[203,14,337,14,"index"],[203,19,332,44],[203,22,337,24,"navigation"],[203,33,337,35,"state"],[203,38,332,44],[203,39,337,14,"index"],[203,44,332,44],[204,0,338,6],[204,14,338,12,"isVertical"],[204,27,338,25,"mode"],[204,36,338,34],[204,43,338,6],[205,0,332,44],[205,14,339,14,"options"],[205,21,332,44],[205,24,339,26,"scene"],[205,30,339,32,"descriptor"],[205,40,332,44],[205,41,339,14,"options"],[205,48,332,44],[206,0,340,6],[206,14,340,12,"gestureDirection"],[206,33,340,31,"options"],[206,41,340,39,"gestureDirection"],[206,57,340,6],[207,0,342,6],[207,14,342,12,"gestureDirectionInverted"],[207,41,343,8],[207,48,343,15,"gestureDirection"],[207,64,343,8],[207,69,343,36],[207,77,343,8],[207,80,344,12,"gestureDirection"],[207,101,344,33],[207,111,343,8],[207,114,345,12,"I18nManager"],[207,139,345,24,"isRTL"],[207,144,342,6],[208,0,348,6],[208,14,348,12,"startValue"],[208,27,348,25],[208,33,348,30,"_gestureStartValue"],[208,51,348,6],[209,0,349,6],[209,14,349,12,"axis"],[209,21,349,19,"isVertical"],[209,34,349,32],[209,38,349,19],[209,41,349,39],[209,45,349,6],[210,0,350,6],[210,14,350,12,"axisDistance"],[210,29,350,27,"isVertical"],[210,42,351,10,"layout"],[210,49,351,17,"height"],[210,55,351,10],[210,56,351,24,"__getValue"],[210,66,351,10],[210,68,350,27],[210,71,352,10,"layout"],[210,78,352,17,"width"],[210,83,352,10],[210,84,352,23,"__getValue"],[210,94,352,10],[210,96,350,6],[211,0,353,6],[211,14,353,12,"currentValue"],[211,29,354,8,"axis"],[211,38,354,17],[211,42,354,8],[211,46,354,25,"gestureDirectionInverted"],[211,70,354,8],[211,73,355,12,"startValue"],[211,86,355,25,"gesture"],[211,94,355,33,"axis"],[211,98,355,25],[211,102,355,41,"axisDistance"],[211,114,354,8],[211,117,356,12,"startValue"],[211,130,356,25,"gesture"],[211,138,356,33,"axis"],[211,142,356,25],[211,146,356,41,"axisDistance"],[211,158,353,6],[212,0,357,6],[212,14,357,12,"value"],[212,22,357,20],[212,42,357,26,"index"],[212,50,357,34],[212,51,357,20],[212,53,357,37,"currentValue"],[212,65,357,20],[212,67,357,51,"index"],[212,72,357,20],[212,73,357,6],[213,0,358,6,"position"],[213,19,358,15,"setValue"],[213,27,358,6],[213,28,358,24,"value"],[213,33,358,6],[214,0,359,5],[214,9,251,38],[215,0,360,4,"onPanResponderTerminationRequest"],[215,42,360,38],[216,0,360,38],[216,17,363,6],[216,22,360,38],[217,0,360,38],[217,9,251,38],[218,0,364,4,"onPanResponderRelease"],[218,31,364,27],[218,62,364,28,"event"],[218,67,364,27],[218,69,364,35,"gesture"],[218,76,364,27],[218,78,364,47],[219,0,364,47],[219,29,368,10],[219,35,368,15,"props"],[219,40,364,47],[220,0,364,47],[220,51,366,8,"transitionProps"],[220,66,364,47],[221,0,364,47],[221,14,366,27,"navigation"],[221,24,364,47],[221,49,366,27,"navigation"],[221,59,364,47],[222,0,364,47],[222,14,366,39,"position"],[222,22,364,47],[222,47,366,39,"position"],[222,55,364,47],[223,0,364,47],[223,14,366,49,"layout"],[223,20,364,47],[223,45,366,49,"layout"],[223,51,364,47],[224,0,364,47],[224,14,366,57,"scene"],[224,19,364,47],[224,44,366,57,"scene"],[224,49,364,47],[225,0,364,47],[225,14,367,8,"mode"],[225,18,364,47],[225,34,367,8,"mode"],[225,38,364,47],[226,0,364,47],[226,14,369,14,"index"],[226,19,364,47],[226,22,369,24,"navigation"],[226,33,369,35,"state"],[226,38,364,47],[226,39,369,14,"index"],[226,44,364,47],[227,0,370,6],[227,14,370,12,"isVertical"],[227,27,370,25,"mode"],[227,36,370,34],[227,43,370,6],[228,0,364,47],[228,14,371,14,"options"],[228,21,364,47],[228,24,371,26,"scene"],[228,30,371,32,"descriptor"],[228,40,364,47],[228,41,371,14,"options"],[228,48,364,47],[229,0,372,6],[229,14,372,12,"gestureDirection"],[229,33,372,31,"options"],[229,41,372,39,"gestureDirection"],[229,57,372,6],[230,0,374,6],[230,14,374,12,"gestureDirectionInverted"],[230,41,375,8],[230,48,375,15,"gestureDirection"],[230,64,375,8],[230,69,375,36],[230,77,375,8],[230,80,376,12,"gestureDirection"],[230,101,376,33],[230,111,375,8],[230,114,377,12,"I18nManager"],[230,139,377,24,"isRTL"],[230,144,374,6],[232,0,379,6],[232,14,379,10],[232,15,379,11],[232,21,379,16,"_isResponding"],[232,34,379,6],[232,36,379,31],[233,0,380,8],[234,0,381,7],[236,0,382,6],[236,16,382,11,"_isResponding"],[236,29,382,6],[236,32,382,27],[236,37,382,6],[237,0,384,6],[237,14,384,12,"immediateIndex"],[237,31,385,8],[237,37,385,13,"_immediateIndex"],[237,52,385,8],[237,56,385,32],[237,60,385,8],[237,63,385,39,"index"],[237,68,385,8],[237,71,385,47],[237,77,385,52,"_immediateIndex"],[237,92,384,6],[238,0,388,6],[238,14,388,12,"axisDistance"],[238,29,388,27,"isVertical"],[238,42,389,10,"layout"],[238,49,389,17,"height"],[238,55,389,10],[238,56,389,24,"__getValue"],[238,66,389,10],[238,68,388,27],[238,71,390,10,"layout"],[238,78,390,17,"width"],[238,83,390,10],[238,84,390,23,"__getValue"],[238,94,390,10],[238,96,388,6],[239,0,391,6],[239,14,391,12,"movementDirection"],[239,34,391,32,"gestureDirectionInverted"],[239,61,391,59],[239,62,391,60],[239,63,391,32],[239,66,391,64],[239,67,391,6],[240,0,392,6],[240,14,392,12,"movedDistance"],[240,30,393,8,"movementDirection"],[240,50,393,28,"gesture"],[240,58,393,36,"isVertical"],[240,71,393,49],[240,75,393,36],[240,78,393,56],[240,82,393,28],[240,83,392,6],[241,0,394,6],[241,14,394,12,"gestureVelocity"],[241,32,395,8,"movementDirection"],[241,52,395,28,"gesture"],[241,60,395,36,"isVertical"],[241,73,395,49],[241,77,395,36],[241,80,395,56],[241,84,395,28],[241,85,394,6],[242,0,396,6],[242,14,396,12,"defaultVelocity"],[242,32,396,30,"axisDistance"],[242,47,396,45,"ANIMATION_DURATION"],[242,65,396,6],[243,0,397,6],[243,14,397,12,"velocity"],[243,25,397,23,"Math"],[243,30,397,28,"max"],[243,33,397,23],[243,34,397,32,"Math"],[243,39,397,37,"abs"],[243,42,397,32],[243,43,397,41,"gestureVelocity"],[243,58,397,32],[243,59,397,23],[243,61,397,59,"defaultVelocity"],[243,76,397,23],[243,77,397,6],[244,0,398,6],[244,14,398,12,"resetDuration"],[244,30,398,28,"gestureDirectionInverted"],[244,57,399,10],[244,58,399,11,"axisDistance"],[244,73,399,26,"movedDistance"],[244,86,399,10],[244,90,399,43,"velocity"],[244,98,398,28],[244,101,400,10,"movedDistance"],[244,117,400,26,"velocity"],[244,125,398,6],[245,0,401,6],[245,14,401,12,"goBackDuration"],[245,31,401,29,"gestureDirectionInverted"],[245,58,402,10,"movedDistance"],[245,74,402,26,"velocity"],[245,82,401,29],[245,85,403,10],[245,86,403,11,"axisDistance"],[245,101,403,26,"movedDistance"],[245,114,403,10],[245,118,403,43,"velocity"],[245,126,401,6],[246,0,406,6,"position"],[246,19,406,15,"stopAnimation"],[246,32,406,6],[246,33,406,29],[246,50,406,38],[247,0,409,8],[247,16,409,12,"gestureVelocity"],[247,34,409,30],[247,35,409,31],[247,38,409,8],[247,40,409,36],[248,0,410,10],[248,20,410,15,"props"],[248,25,410,10],[248,26,410,21,"onGestureCanceled"],[248,43,410,10],[248,47,410,42],[248,53,410,47,"props"],[248,58,410,42],[248,59,410,53,"onGestureCanceled"],[248,76,410,42],[248,78,410,10],[250,0,411,10],[250,20,411,15,"_reset"],[250,26,411,10],[250,27,411,22,"immediateIndex"],[250,41,411,10],[250,43,411,38,"resetDuration"],[250,56,411,10],[252,0,412,10],[253,0,413,9],[255,0,414,8],[255,16,414,12,"gestureVelocity"],[255,34,414,30],[255,37,414,8],[255,39,414,35],[256,0,415,10],[256,20,415,15,"props"],[256,25,415,10],[256,26,415,21,"onGestureFinish"],[256,41,415,10],[256,45,415,40],[256,51,415,45,"props"],[256,56,415,40],[256,57,415,51,"onGestureFinish"],[256,72,415,40],[256,74,415,10],[258,0,416,10],[258,20,416,15,"_goBack"],[258,27,416,10],[258,28,416,23,"immediateIndex"],[258,42,416,10],[258,44,416,39,"goBackDuration"],[258,58,416,10],[260,0,417,10],[261,0,418,9],[263,0,422,8],[263,16,422,12,"value"],[263,25,422,21,"index"],[263,33,422,29,"POSITION_THRESHOLD"],[263,51,422,8],[263,53,422,49],[264,0,423,10],[264,20,423,15,"props"],[264,25,423,10],[264,26,423,21,"onGestureFinish"],[264,41,423,10],[264,45,423,40],[264,51,423,45,"props"],[264,56,423,40],[264,57,423,51,"onGestureFinish"],[264,72,423,40],[264,74,423,10],[266,0,424,10],[266,20,424,15,"_goBack"],[266,27,424,10],[266,28,424,23,"immediateIndex"],[266,42,424,10],[266,44,424,39,"goBackDuration"],[266,58,424,10],[267,0,425,9],[267,13,422,8],[267,19,425,15],[268,0,426,10],[268,20,426,15,"props"],[268,25,426,10],[268,26,426,21,"onGestureCanceled"],[268,43,426,10],[268,47,426,42],[268,53,426,47,"props"],[268,58,426,42],[268,59,426,53,"onGestureCanceled"],[268,76,426,42],[268,78,426,10],[270,0,427,10],[270,20,427,15,"_reset"],[270,26,427,10],[270,27,427,22,"immediateIndex"],[270,41,427,10],[270,43,427,38,"resetDuration"],[270,56,427,10],[271,0,428,9],[272,0,429,7],[272,11,406,6],[273,0,430,5],[274,0,251,38],[274,7,251,18],[274,8,112,21],[276,0,112,21],[276,12,433,2,"_onFloatingHeaderLayout"],[276,35,112,21],[276,38,433,28],[276,51,433,33],[277,0,434,4],[277,14,434,9,"setState"],[277,22,434,4],[277,23,434,18],[278,0,434,20,"floatingHeaderHeight"],[278,32,434,42,"e"],[278,34,434,44,"nativeEvent"],[278,45,434,42],[278,46,434,56,"layout"],[278,52,434,42],[278,53,434,63,"height"],[279,0,434,18],[279,9,434,4],[280,0,435,3],[280,7,112,21],[282,0,112,21],[282,12,582,2,"_getTransitionConfig"],[282,32,112,21],[282,35,582,25],[282,47,582,31],[283,0,583,4],[283,12,583,10,"isModal"],[283,22,583,20],[283,28,583,25,"props"],[283,33,583,20],[283,34,583,31,"mode"],[283,38,583,20],[283,43,583,40],[283,50,583,4],[284,0,585,4],[284,15,585,11,"TransitionConfigs"],[284,51,585,29,"getTransitionConfig"],[284,70,585,11],[284,71,586,6],[284,77,586,11,"props"],[284,82,586,6],[284,83,586,17,"transitionConfig"],[284,99,585,11],[284,101,587,6],[284,107,587,11,"props"],[284,112,587,6],[284,113,587,17,"transitionProps"],[284,128,585,11],[284,130,588,6],[284,136,588,11,"props"],[284,141,588,6],[284,142,588,17,"lastTransitionProps"],[284,161,585,11],[284,163,589,6,"isModal"],[284,170,585,11],[284,171,585,4],[285,0,591,3],[285,7,112,21],[287,0,112,21],[287,12,593,2,"_renderCard"],[287,23,112,21],[287,26,593,16],[287,43,593,25],[288,0,593,25],[288,36,594,35],[288,42,594,40,"_getTransitionConfig"],[288,62,594,35],[288,64,593,25],[289,0,593,25],[289,12,594,12,"screenInterpolator"],[289,30,593,25],[289,55,594,12,"screenInterpolator"],[289,73,593,25],[291,0,596,4],[291,12,596,10,"style"],[291,20,597,6,"screenInterpolator"],[291,42,598,6,"screenInterpolator"],[291,79,598,30],[291,85,598,35,"props"],[291,90,598,30],[291,91,598,41,"transitionProps"],[291,106,598,6],[292,0,598,58,"scene"],[293,0,598,6],[293,11,596,4],[294,0,593,25],[294,12,603,12,"options"],[294,19,593,25],[294,22,603,24,"scene"],[294,28,603,30,"descriptor"],[294,38,593,25],[294,39,603,12,"options"],[294,46,593,25],[295,0,604,4],[295,12,604,10,"hasHeader"],[295,24,604,22,"options"],[295,32,604,30,"header"],[295,38,604,22],[295,43,604,41],[295,47,604,4],[297,0,605,4],[297,12,605,10,"headerMode"],[297,25,605,23],[297,31,605,28,"_getHeaderMode"],[297,45,605,23],[297,47,605,4],[299,0,606,4],[299,12,606,8,"marginTop"],[299,24,606,20],[299,25,606,4],[301,0,607,4],[301,12,607,8],[301,13,607,9,"hasHeader"],[301,22,607,8],[301,26,607,22,"headerMode"],[301,41,607,37],[301,48,607,4],[301,50,607,46],[302,0,608,6,"marginTop"],[302,22,608,18],[302,23,608,19],[302,29,608,24,"state"],[302,34,608,19],[302,35,608,30,"floatingHeaderHeight"],[302,55,608,6],[303,0,609,5],[305,0,611,4],[305,15,612,6],[305,44,612,7],[305,66,612,6],[305,81,613,12],[305,87,613,17,"props"],[305,92,613,12],[305,93,613,23,"transitionProps"],[305,108,612,6],[306,0,614,8],[306,25,614,21,"scene"],[306,31,614,27,"key"],[306,34,612,6],[307,0,615,8],[307,17,615,15],[307,18,615,16,"style"],[307,23,615,15],[307,25,615,23],[308,0,615,25,"marginTop"],[309,0,615,23],[309,11,615,15],[309,13,615,38],[309,19,615,43,"props"],[309,24,615,38],[309,25,615,49,"cardStyle"],[309,34,615,15],[309,35,612,6],[310,0,616,8],[310,17,616,15,"scene"],[310,22,612,6],[311,0,612,6],[312,0,612,6],[313,0,612,6],[314,0,612,6],[315,0,612,6],[315,12,618,9],[315,18,618,14,"_renderInnerScene"],[315,35,618,9],[315,36,618,32,"scene"],[315,41,618,9],[315,42,612,6],[315,43,611,4],[316,0,621,3],[316,7,112,21],[318,0,115,4],[318,12,115,9,"state"],[318,17,115,4],[318,20,115,17],[319,0,121,6,"floatingHeaderHeight"],[319,30,121,28,"getDefaultHeaderHeight"],[319,53,121,51,"props"],[319,59,121,57,"isLandscape"],[319,70,121,28],[320,0,115,17],[320,7,115,4],[321,0,112,21],[322,0,123,3],[326,36,125,16,"scene"],[326,41],[326,43,125,23,"headerMode"],[326,53],[326,55,125,35],[327,0,125,35],[327,12,126,12,"options"],[327,19,125,35],[327,22,126,24,"scene"],[327,28,126,30,"descriptor"],[327,38,125,35],[327,39,126,12,"options"],[327,46,125,35],[328,0,125,35],[328,12,127,12,"header"],[328,18,125,35],[328,21,127,23,"options"],[328,28,125,35],[328,29,127,12,"header"],[328,35,125,35],[330,0,129,4],[330,12,129,8,"__DEV__"],[330,23,129,19],[330,30,129,26,"header"],[330,36,129,19],[330,41,129,37],[330,49,129,4],[330,51,129,47],[331,0,130,6],[331,16,130,12],[331,20,130,16,"Error"],[331,25,130,12],[331,55,131,34,"header"],[331,61,130,12],[331,143,130,6],[332,0,133,5],[334,0,135,4],[334,12,135,8,"header"],[334,23,135,19],[334,27,135,8],[334,31,135,27,"headerMode"],[334,46,135,42],[334,54,135,4],[334,56,135,52],[335,0,136,6],[335,17,136,13],[335,21,136,6],[336,0,137,5],[338,0,140,4],[338,12,140,8,"React"],[338,27,140,14,"isValidElement"],[338,41,140,8],[338,42,140,29,"header"],[338,48,140,8],[338,49,140,4],[338,51,140,38],[339,0,141,6],[339,17,141,13,"header"],[339,23,141,6],[340,0,142,5],[342,0,145,4],[342,12,145,10,"renderHeader"],[342,27,145,25,"header"],[342,37,145,36],[343,0,145,36],[343,17,145,45],[343,46,145,46],[343,61,145,45],[343,76,145,57,"props"],[343,81,145,45],[344,0,145,45],[345,0,145,45],[346,0,145,45],[347,0,145,45],[348,0,145,45],[348,13,145,36],[349,0,145,36],[349,9,145,4],[351,0,125,35],[351,37,151,8],[351,42,151,13,"_getTransitionConfig"],[351,62,151,8],[351,64,125,35],[352,0,125,35],[352,12,148,6,"headerLeftInterpolator"],[352,34,125,35],[352,60,148,6,"headerLeftInterpolator"],[352,82,125,35],[353,0,125,35],[353,12,149,6,"headerTitleInterpolator"],[353,35,125,35],[353,61,149,6,"headerTitleInterpolator"],[353,84,125,35],[354,0,125,35],[354,12,150,6,"headerRightInterpolator"],[354,35,125,35],[354,61,150,6,"headerRightInterpolator"],[354,84,125,35],[356,0,125,35],[356,27,158,8],[356,32,158,13,"props"],[356,37,125,35],[357,0,125,35],[357,12,154,6,"mode"],[357,16,125,35],[357,32,154,6,"mode"],[357,36,125,35],[358,0,125,35],[358,12,155,6,"transitionProps"],[358,27,125,35],[358,43,155,6,"transitionProps"],[358,58,125,35],[359,0,125,35],[359,12,156,6,"lastTransitionProps"],[359,31,125,35],[359,47,156,6,"lastTransitionProps"],[359,66,125,35],[360,0,125,35],[360,12,157,9,"passProps"],[360,21,125,35],[362,0,160,4],[362,15,161,6],[362,44,161,7],[362,81,161,6],[363,0,161,26],[363,17,161,33,"scene"],[363,23,161,39,"descriptor"],[363,33,161,33],[363,34,161,50,"navigation"],[363,44,161,6],[364,0,161,6],[365,0,161,6],[366,0,161,6],[367,0,161,6],[368,0,161,6],[368,11,162,9,"renderHeader"],[368,42,163,13,"passProps"],[368,51,162,9],[368,53,164,13,"transitionProps"],[368,68,162,9],[369,0,165,10,"scene"],[369,22,162,9],[370,0,166,10,"mode"],[370,16,166,16,"headerMode"],[370,26,162,9],[371,0,167,10,"transitionPreset"],[371,28,167,28],[371,33,167,33,"_getHeaderTransitionPreset"],[371,59,167,28],[371,61,162,9],[372,0,168,10,"layoutPreset"],[372,24,168,24],[372,29,168,29,"_getHeaderLayoutPreset"],[372,51,168,24],[372,53,162,9],[373,0,169,10,"backTitleVisible"],[373,28,169,28],[373,33,169,33,"_getheaderBackTitleVisible"],[373,59,169,28],[373,61,162,9],[374,0,170,10,"leftInterpolator"],[374,28,170,28,"headerLeftInterpolator"],[374,50,162,9],[375,0,171,10,"titleInterpolator"],[375,29,171,29,"headerTitleInterpolator"],[375,52,162,9],[376,0,172,10,"rightInterpolator"],[376,29,172,29,"headerRightInterpolator"],[377,0,162,9],[377,11,161,6],[377,12,160,4],[378,0,176,3],[381,41,179,21,"props"],[381,46],[381,48,179,28],[382,0,187,4,"animatedSubscribeValue"],[382,31,187,27,"props"],[382,37,187,33,"transitionProps"],[382,52,187,27],[382,53,187,49,"layout"],[382,59,187,27],[382,60,187,56,"width"],[382,65,187,4],[383,0,188,4,"animatedSubscribeValue"],[383,31,188,27,"props"],[383,37,188,33,"transitionProps"],[383,52,188,27],[383,53,188,49,"layout"],[383,59,188,27],[383,60,188,56,"height"],[383,66,188,4],[384,0,189,4,"animatedSubscribeValue"],[384,31,189,27,"props"],[384,37,189,33,"transitionProps"],[384,52,189,27],[384,53,189,49,"position"],[384,61,189,4],[385,0,190,3],[388,29,192,9,"resetToIndex"],[388,41],[388,43,192,23,"duration"],[388,51],[388,53,192,33],[389,0,193,4],[389,12,193,8,"Platform"],[389,34,193,17,"OS"],[389,36,193,8],[389,41,193,24],[389,46,193,8],[389,50,193,33],[389,109,193,4],[389,111,193,68],[390,0,194,6,"Animated"],[390,32,194,15,"spring"],[390,38,194,6],[390,39,194,22],[390,44,194,27,"props"],[390,49,194,22],[390,50,194,33,"transitionProps"],[390,65,194,22],[390,66,194,49,"position"],[390,74,194,6],[390,76,194,59],[391,0,195,8,"toValue"],[391,21,195,17,"resetToIndex"],[391,33,194,59],[392,0,196,8,"stiffness"],[392,23,196,19],[392,27,194,59],[393,0,197,8,"damping"],[393,21,197,17],[393,24,194,59],[394,0,198,8,"mass"],[394,18,198,14],[394,19,194,59],[395,0,199,8,"useNativeDriver"],[395,29,199,25],[395,34,199,30,"props"],[395,39,199,25],[395,40,199,36,"transitionProps"],[395,55,199,25],[395,56,199,52,"position"],[395,64,199,25],[395,65,199,61,"__isNative"],[396,0,194,59],[396,11,194,6],[396,13,200,9,"start"],[396,18,194,6],[397,0,201,5],[397,9,193,4],[397,15,201,11],[398,0,202,6,"Animated"],[398,32,202,15,"timing"],[398,38,202,6],[398,39,202,22],[398,44,202,27,"props"],[398,49,202,22],[398,50,202,33,"transitionProps"],[398,65,202,22],[398,66,202,49,"position"],[398,74,202,6],[398,76,202,59],[399,0,203,8,"toValue"],[399,21,203,17,"resetToIndex"],[399,33,202,59],[400,0,204,8,"duration"],[400,30,202,59],[401,0,205,8,"easing"],[401,20,205,16,"EaseInOut"],[401,29,202,59],[402,0,206,8,"useNativeDriver"],[402,29,206,25],[402,34,206,30,"props"],[402,39,206,25],[402,40,206,36,"transitionProps"],[402,55,206,25],[402,56,206,52,"position"],[402,64,206,25],[402,65,206,61,"__isNative"],[403,0,202,59],[403,11,202,6],[403,13,207,9,"start"],[403,18,202,6],[404,0,208,5],[405,0,209,3],[408,30,211,10,"backFromIndex"],[408,43],[408,45,211,25,"duration"],[408,53],[408,55,211,35],[409,0,211,35],[411,0,211,35],[411,37,212,45],[411,42,212,50,"props"],[411,47,212,45],[411,48,212,56,"transitionProps"],[411,63,211,35],[412,0,211,35],[412,12,212,12,"navigation"],[412,22,211,35],[412,48,212,12,"navigation"],[412,58,211,35],[413,0,211,35],[413,12,212,24,"position"],[413,20,211,35],[413,46,212,24,"position"],[413,54,211,35],[414,0,211,35],[414,12,212,34,"scenes"],[414,18,211,35],[414,44,212,34,"scenes"],[414,50,211,35],[415,0,213,4],[415,12,213,10,"toValue"],[415,22,213,20,"Math"],[415,27,213,25,"max"],[415,30,213,20],[415,31,213,29,"backFromIndex"],[415,47,213,45],[415,48,213,20],[415,50,213,48],[415,51,213,20],[415,52,213,4],[416,0,217,4],[416,13,217,9,"_immediateIndex"],[416,28,217,4],[416,31,217,27,"toValue"],[416,38,217,4],[418,0,219,4],[418,12,219,10,"onCompleteAnimation"],[418,34,219,32],[418,43,219,10,"onCompleteAnimation"],[418,62,219,32],[418,65,219,38],[419,0,220,6],[419,17,220,11,"_immediateIndex"],[419,32,220,6],[419,35,220,29],[419,39,220,6],[420,0,221,6],[420,14,221,12,"backFromScene"],[420,30,221,28,"scenes"],[420,37,221,35,"find"],[420,41,221,28],[420,42,221,40],[421,0,221,40],[421,19,221,45,"s"],[421,21,221,47,"index"],[421,26,221,45],[421,31,221,57,"toValue"],[421,41,221,67],[421,42,221,40],[422,0,221,40],[422,11,221,28],[422,12,221,6],[424,0,222,6],[424,14,222,10],[424,15,222,11],[424,22,222,16,"_isResponding"],[424,35,222,10],[424,39,222,33,"backFromScene"],[424,52,222,6],[424,54,222,48],[425,0,223,8,"navigation"],[425,23,223,19,"dispatch"],[425,31,223,8],[425,32,224,10,"NavigationActions"],[425,59,224,28,"back"],[425,63,224,10],[425,64,224,33],[426,0,225,12,"key"],[426,19,225,17,"backFromScene"],[426,33,225,31,"route"],[426,38,225,17],[426,39,225,37,"key"],[426,42,224,33],[427,0,226,12,"immediate"],[427,25,226,23],[428,0,224,33],[428,13,224,10],[428,14,223,8],[429,0,229,8,"navigation"],[429,23,229,19,"dispatch"],[429,31,229,8],[429,32,229,28,"StackActions"],[429,54,229,41,"completeTransition"],[429,72,229,28],[429,74,229,8],[430,0,230,7],[431,0,231,5],[431,9,219,4],[433,0,233,4],[433,12,233,8,"Platform"],[433,34,233,17,"OS"],[433,36,233,8],[433,41,233,24],[433,46,233,8],[433,50,233,33],[433,109,233,4],[433,111,233,68],[434,0,234,6,"Animated"],[434,32,234,15,"spring"],[434,38,234,6],[434,39,234,22,"position"],[434,47,234,6],[434,49,234,32],[435,0,235,8,"toValue"],[435,28,234,32],[436,0,236,8,"stiffness"],[436,23,236,19],[436,27,234,32],[437,0,237,8,"damping"],[437,21,237,17],[437,24,234,32],[438,0,238,8,"mass"],[438,18,238,14],[438,19,234,32],[439,0,239,8,"useNativeDriver"],[439,29,239,25,"position"],[439,38,239,34,"__isNative"],[440,0,234,32],[440,11,234,6],[440,13,240,9,"start"],[440,18,234,6],[440,19,240,15,"onCompleteAnimation"],[440,38,234,6],[441,0,241,5],[441,9,233,4],[441,15,241,11],[442,0,242,6,"Animated"],[442,32,242,15,"timing"],[442,38,242,6],[442,39,242,22,"position"],[442,47,242,6],[442,49,242,32],[443,0,243,8,"toValue"],[443,28,242,32],[444,0,244,8,"duration"],[444,30,242,32],[445,0,245,8,"easing"],[445,20,245,16,"EaseInOut"],[445,29,242,32],[446,0,246,8,"useNativeDriver"],[446,29,246,25,"position"],[446,38,246,34,"__isNative"],[447,0,242,32],[447,11,242,6],[447,13,247,9,"start"],[447,18,242,6],[447,19,247,15,"onCompleteAnimation"],[447,38,242,6],[448,0,248,5],[449,0,249,3],[452,31,437,11],[453,0,437,11],[455,0,438,4],[455,12,438,8,"floatingHeader"],[455,29,438,25],[455,33,438,4],[457,0,439,4],[457,12,439,10,"headerMode"],[457,25,439,23],[457,30,439,28,"_getHeaderMode"],[457,44,439,23],[457,46,439,4],[459,0,441,4],[459,12,441,8,"headerMode"],[459,27,441,23],[459,34,441,4],[459,36,441,32],[460,0,441,32],[460,14,442,14,"scene"],[460,20,441,32],[460,23,442,24],[460,28,442,29,"props"],[460,33,442,24],[460,34,442,35,"transitionProps"],[460,49,441,32],[460,50,442,14,"scene"],[460,55,441,32],[461,0,443,6,"floatingHeader"],[461,27,444,8],[461,56,444,9],[461,73,444,8],[462,0,444,14],[462,27,444,28],[462,37,444,8],[463,0,444,39],[463,22,444,49],[463,27,444,54,"_onFloatingHeaderLayout"],[463,50,444,8],[464,0,444,8],[465,0,444,8],[466,0,444,8],[467,0,444,8],[468,0,444,8],[468,13,445,11],[468,18,445,16,"_renderHeader"],[468,31,445,11],[468,32,445,30,"scene"],[468,38,445,11],[468,40,445,37,"headerMode"],[468,50,445,11],[468,51,444,8],[468,52,443,6],[469,0,448,5],[471,0,437,11],[471,27,452,8],[471,32,452,13,"props"],[471,37,437,11],[472,0,437,11],[472,49,450,6,"transitionProps"],[472,64,437,11],[473,0,437,11],[473,12,450,25,"scene"],[473,17,437,11],[473,42,450,25,"scene"],[473,47,437,11],[474,0,437,11],[474,12,450,32,"scenes"],[474,18,437,11],[474,43,450,32,"scenes"],[474,49,437,11],[475,0,437,11],[475,12,451,6,"mode"],[475,16,437,11],[475,32,451,6,"mode"],[475,36,437,11],[476,0,437,11],[476,12,453,12,"options"],[476,19,437,11],[476,22,453,24,"scene"],[476,28,453,30,"descriptor"],[476,38,437,11],[476,39,453,12,"options"],[476,46,437,11],[477,0,455,4],[477,12,455,10,"gesturesEnabled"],[477,30,456,6],[477,37,456,13,"options"],[477,45,456,21,"gesturesEnabled"],[477,60,456,6],[477,65,456,41],[477,74,456,6],[477,77,457,10,"options"],[477,85,457,18,"gesturesEnabled"],[477,100,456,6],[477,103,458,10,"Platform"],[477,125,458,19,"OS"],[477,127,458,10],[477,132,458,26],[477,137,455,4],[478,0,460,4],[478,12,460,10,"responder"],[478,24,460,22],[478,25,460,23,"gesturesEnabled"],[478,40,460,22],[478,43,460,41],[478,47,460,22],[478,50,460,48],[478,55,460,53,"_panResponder"],[478,68,460,4],[479,0,462,4],[479,12,462,10,"handlers"],[479,23,462,21,"gesturesEnabled"],[479,41,462,39,"responder"],[479,51,462,49,"panHandlers"],[479,62,462,21],[479,65,462,63],[479,67,462,4],[480,0,463,4],[480,12,463,10,"containerStyle"],[480,29,463,27],[480,30,464,6,"styles"],[480,37,464,13,"container"],[480,46,463,27],[480,48,465,6],[480,53,465,11,"_getTransitionConfig"],[480,73,465,6],[480,76,465,34,"containerStyle"],[480,90,463,27],[480,91,463,4],[481,0,468,4],[481,15,469,6],[481,44,469,7],[481,61,469,6],[481,76,469,16,"handlers"],[481,84,469,6],[482,0,469,26],[482,17,469,33,"containerStyle"],[482,31,469,6],[483,0,469,6],[484,0,469,6],[485,0,469,6],[486,0,469,6],[487,0,469,6],[487,12,470,8],[487,41,470,9],[487,58,470,8],[488,0,470,14],[488,17,470,21,"styles"],[488,24,470,28,"scenes"],[488,30,470,8],[489,0,470,8],[490,0,470,8],[491,0,470,8],[492,0,470,8],[493,0,470,8],[493,11,471,11,"scenes"],[493,18,471,18,"map"],[493,21,471,11],[493,22,471,22],[494,0,471,22],[494,17,471,27],[494,24,471,32,"_renderCard"],[494,35,471,27],[494,36,471,44,"s"],[494,37,471,27],[494,38,471,22],[495,0,471,22],[495,9,471,11],[495,10,470,8],[495,11,469,6],[495,13,473,9,"floatingHeader"],[495,27,469,6],[495,28,468,4],[496,0,476,3],[499,39,478,19],[500,0,479,4],[500,12,479,8],[500,17,479,13,"props"],[500,22,479,8],[500,23,479,19,"headerMode"],[500,33,479,4],[500,35,479,31],[501,0,480,6],[501,17,480,13],[501,22,480,18,"props"],[501,27,480,13],[501,28,480,24,"headerMode"],[501,38,480,6],[502,0,481,5],[504,0,482,4],[504,12,482,8,"Platform"],[504,34,482,17,"OS"],[504,36,482,8],[504,41,482,24],[504,50,482,8],[504,54,482,37],[504,59,482,42,"props"],[504,64,482,37],[504,65,482,48,"mode"],[504,69,482,37],[504,74,482,57],[504,81,482,4],[504,83,482,66],[505,0,483,6],[505,17,483,13],[505,25,483,6],[506,0,484,5],[508,0,485,4],[508,15,485,11],[508,22,485,4],[509,0,486,3],[512,47,488,27],[513,0,488,27],[513,12,489,12,"headerLayoutPreset"],[513,30,488,27],[513,33,489,35],[513,38,489,40,"props"],[513,43,488,27],[513,44,489,12,"headerLayoutPreset"],[513,62,488,27],[515,0,490,4],[515,12,490,8,"headerLayoutPreset"],[515,30,490,4],[515,32,490,28],[516,0,491,6],[516,14,491,10,"__DEV__"],[516,21,491,6],[516,23,491,19],[517,0,492,8],[517,16,493,10],[517,21,493,15,"_getHeaderTransitionPreset"],[517,47,493,10],[517,54,493,48],[517,61,493,10],[517,65,494,10,"headerLayoutPreset"],[517,88,494,33],[517,94,493,10],[517,98,495,10,"Platform"],[517,120,495,19,"OS"],[517,122,495,10],[517,127,495,26],[517,132,492,8],[517,134,496,10],[518,0,497,10,"console"],[518,22,497,18,"warn"],[518,26,497,10],[519,0,500,9],[520,0,501,7],[522,0,502,6],[522,14,502,10,"HEADER_LAYOUT_PRESET_VALUES"],[522,42,502,38,"includes"],[522,50,502,10],[522,51,502,47,"headerLayoutPreset"],[522,69,502,10],[522,70,502,6],[522,72,502,68],[523,0,503,8],[523,19,503,15,"headerLayoutPreset"],[523,37,503,8],[524,0,504,7],[526,0,506,6],[526,14,506,10,"__DEV__"],[526,21,506,6],[526,23,506,19],[527,0,507,8,"console"],[527,20,507,16,"error"],[527,25,507,8],[527,102,508,84,"HEADER_LAYOUT_PRESET_VALUES"],[527,130,508,112,"join"],[527,134,508,84],[527,135,509,12],[527,139,508,84],[527,140,507,8],[527,162,510,28,"JSON"],[527,167,510,33,"stringify"],[527,176,510,28],[527,177,510,43,"headerLayoutPreset"],[527,195,510,28],[527,196,507,8],[528,0,512,7],[529,0,513,5],[531,0,515,4],[531,12,515,8,"Platform"],[531,34,515,17,"OS"],[531,36,515,8],[531,41,515,24],[531,50,515,4],[531,52,515,35],[532,0,516,6],[532,17,516,13],[532,23,516,6],[533,0,517,5],[533,9,515,4],[533,15,517,11],[534,0,518,6],[534,17,518,13],[534,25,518,6],[535,0,519,5],[536,0,520,3],[539,51,522,31],[540,0,525,4],[540,12,525,8,"Platform"],[540,34,525,17,"OS"],[540,36,525,8],[540,41,525,24],[540,50,525,8],[540,54,525,37],[540,59,525,42,"_getHeaderMode"],[540,73,525,37],[540,80,525,63],[540,88,525,4],[540,90,525,73],[541,0,526,6],[541,17,526,13],[541,32,526,6],[542,0,527,5],[544,0,522,31],[544,12,529,12,"headerTransitionPreset"],[544,34,522,31],[544,37,529,39],[544,42,529,44,"props"],[544,47,522,31],[544,48,529,12,"headerTransitionPreset"],[544,70,522,31],[546,0,530,4],[546,12,530,8,"headerTransitionPreset"],[546,34,530,4],[546,36,530,32],[547,0,531,6],[547,14,531,10,"HEADER_TRANSITION_PRESET_VALUES"],[547,46,531,42,"includes"],[547,54,531,10],[547,55,531,51,"headerTransitionPreset"],[547,77,531,10],[547,78,531,6],[547,80,531,76],[548,0,532,8],[548,19,532,15,"headerTransitionPreset"],[548,41,532,8],[549,0,533,7],[551,0,535,6],[551,14,535,10,"__DEV__"],[551,21,535,6],[551,23,535,19],[552,0,536,8,"console"],[552,20,536,16,"error"],[552,25,536,8],[552,106,537,88,"HEADER_TRANSITION_PRESET_VALUES"],[552,138,537,120,"join"],[552,142,537,88],[552,143,538,12],[552,147,537,88],[552,148,536,8],[552,170,539,28,"JSON"],[552,175,539,33,"stringify"],[552,184,539,28],[552,185,539,43,"headerTransitionPreset"],[552,207,539,28],[552,208,536,8],[553,0,541,7],[554,0,542,5],[556,0,544,4],[556,15,544,11],[556,30,544,4],[557,0,545,3],[560,51,547,31],[561,0,547,31],[561,12,548,12,"headerBackTitleVisible"],[561,34,547,31],[561,37,548,39],[561,42,548,44,"props"],[561,47,547,31],[561,48,548,12,"headerBackTitleVisible"],[561,70,547,31],[562,0,550,4],[562,15,550,11,"headerBackTitleVisible"],[562,37,550,4],[563,0,551,3],[566,40,553,20,"scene"],[566,45],[566,47,553,27],[567,0,553,27],[567,32,554,50,"scene"],[567,38,554,56,"descriptor"],[567,48,553,27],[568,0,553,27],[568,12,554,12,"options"],[568,19,553,27],[568,40,554,12,"options"],[568,47,553,27],[569,0,553,27],[569,12,554,21,"navigation"],[569,22,553,27],[569,43,554,21,"navigation"],[569,53,553,27],[570,0,553,27],[570,12,554,33,"getComponent"],[570,24,553,27],[570,45,554,33,"getComponent"],[570,57,553,27],[571,0,555,4],[571,12,555,10,"SceneComponent"],[571,29,555,27,"getComponent"],[571,43,555,4],[572,0,553,27],[572,12,557,12,"screenProps"],[572,23,553,27],[572,26,557,28],[572,31,557,33,"props"],[572,36,553,27],[572,37,557,12,"screenProps"],[572,48,553,27],[574,0,558,4],[574,12,558,10,"headerMode"],[574,25,558,23],[574,30,558,28,"_getHeaderMode"],[574,44,558,23],[574,46,558,4],[576,0,559,4],[576,12,559,8,"headerMode"],[576,27,559,23],[576,35,559,4],[576,37,559,33],[577,0,560,6],[577,17,561,8],[577,46,561,9],[577,63,561,8],[578,0,561,14],[578,19,561,21,"styles"],[578,26,561,28,"container"],[578,35,561,8],[579,0,561,8],[580,0,561,8],[581,0,561,8],[582,0,561,8],[583,0,561,8],[583,13,562,10],[583,42,562,11],[583,59,562,10],[584,0,562,16],[584,19,562,23,"styles"],[584,26,562,30,"scenes"],[584,32,562,10],[585,0,562,10],[586,0,562,10],[587,0,562,10],[588,0,562,10],[589,0,562,10],[589,13,563,12],[589,42,563,13],[589,60,563,12],[590,0,564,14],[590,25,564,27,"screenProps"],[590,36,563,12],[591,0,565,14],[591,24,565,26,"navigation"],[591,34,563,12],[592,0,566,14],[592,23,566,25,"SceneComponent"],[592,37,563,12],[593,0,563,12],[594,0,563,12],[595,0,563,12],[596,0,563,12],[597,0,563,12],[597,12,562,10],[597,13,561,8],[597,15,569,11],[597,20,569,16,"_renderHeader"],[597,33,569,11],[597,34,569,30,"scene"],[597,39,569,11],[597,41,569,37,"headerMode"],[597,51,569,11],[597,52,561,8],[597,53,560,6],[598,0,572,5],[600,0,573,4],[600,15,574,6],[600,44,574,7],[600,62,574,6],[601,0,575,8],[601,23,575,21,"screenProps"],[601,34,574,6],[602,0,576,8],[602,22,576,20,"navigation"],[602,32,574,6],[603,0,577,8],[603,21,577,19,"SceneComponent"],[603,35,574,6],[604,0,574,6],[605,0,574,6],[606,0,574,6],[607,0,574,6],[608,0,574,6],[608,10,573,4],[609,0,580,3],[615,4,91,30,"React"],[615,19,91,36,"Component"],[615,28],[619,0,624,0],[619,6,624,6,"styles"],[619,15,624,15,"StyleSheet"],[619,39,624,26,"create"],[619,45,624,15],[619,46,624,33],[620,0,625,2,"container"],[620,15,625,13],[621,0,626,4,"flex"],[621,12,626,10],[621,13,625,13],[622,0,631,4,"flexDirection"],[622,21,631,19],[623,0,625,13],[623,5,624,33],[624,0,633,2,"scenes"],[624,12,633,10],[625,0,634,4,"flex"],[625,12,634,10],[626,0,633,10],[627,0,624,33],[627,3,624,15],[627,4,624,0],[629,18,638,15],[629,48,638,31,"StackViewLayout"],[629,63,638,15],[629,64]]},"type":"js/module"}]}